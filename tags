!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Arg	dwm.c	/^} Arg;$/;"	t	typeref:union:__anon13	file:
BETWEEN	util.h	5;"	d
BUTTONMASK	dwm.c	49;"	d	file:
Button	dwm.c	/^} Button;$/;"	t	typeref:struct:__anon14	file:
CC	config.mk	/^CC = cc$/;"	m
CFLAGS	config.mk	/^CFLAGS   = -std=c99 -pedantic -Wall -Wno-deprecated-declarations -Os ${INCS} ${CPPFLAGS}$/;"	m
CLEANMASK	dwm.c	50;"	d	file:
CPPFLAGS	config.mk	/^CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=200809L -DVERSION=\\"${VERSION}\\" ${XINERAMAFLAGS}$/;"	m
Client	dwm.c	/^struct Client {$/;"	s	file:
Client	dwm.c	/^typedef struct Client Client;$/;"	t	typeref:struct:Client	file:
ClkClientWin	dwm.c	/^       ClkClientWin, ClkRootWin, ClkLast }; \/* clicks *\/$/;"	e	enum:__anon12	file:
ClkLast	dwm.c	/^       ClkClientWin, ClkRootWin, ClkLast }; \/* clicks *\/$/;"	e	enum:__anon12	file:
ClkLtSymbol	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon12	file:
ClkRootWin	dwm.c	/^       ClkClientWin, ClkRootWin, ClkLast }; \/* clicks *\/$/;"	e	enum:__anon12	file:
ClkStatusText	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon12	file:
ClkTagBar	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon12	file:
ClkWinTitle	dwm.c	/^enum { ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle,$/;"	e	enum:__anon12	file:
Clr	drw.h	/^typedef XftColor Clr;$/;"	t
ColBg	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	e	enum:__anon5
ColBorder	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	e	enum:__anon5
ColFg	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	e	enum:__anon5
Cur	drw.h	/^} Cur;$/;"	t	typeref:struct:__anon4
CurLast	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon7	file:
CurMove	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon7	file:
CurNormal	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon7	file:
CurResize	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon7	file:
Drw	drw.h	/^} Drw;$/;"	t	typeref:struct:__anon6
FORCE_VSPLIT	config.def.h	94;"	d
FORCE_VSPLIT	config.h	94;"	d
FORCE_VSPLIT	reference/config-prevanity.h	92;"	d
FREETYPEINC	config.mk	/^FREETYPEINC = \/usr\/include\/freetype2$/;"	m
FREETYPELIBS	config.mk	/^FREETYPELIBS = -lfontconfig -lXft$/;"	m
Fnt	drw.h	/^typedef struct Fnt {$/;"	s
Fnt	drw.h	/^} Fnt;$/;"	t	typeref:struct:Fnt
HEIGHT	dwm.c	57;"	d	file:
INCS	config.mk	/^INCS = -I${X11INC} -I${FREETYPEINC}$/;"	m
INTERSECT	dwm.c	51;"	d	file:
ISVISIBLE	dwm.c	53;"	d	file:
Key	dwm.c	/^} Key;$/;"	t	typeref:struct:__anon15	file:
LDFLAGS	config.mk	/^LDFLAGS  = ${LIBS}$/;"	m
LENGTH	dwm.c	54;"	d	file:
LIBS	config.mk	/^LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS}$/;"	m
Layout	dwm.c	/^} Layout;$/;"	t	typeref:struct:__anon16	file:
MANPREFIX	config.mk	/^MANPREFIX = ${PREFIX}\/share\/man$/;"	m
MAX	util.h	3;"	d
MIN	util.h	4;"	d
MODKEY	config.def.h	118;"	d
MODKEY	config.defs.h	100;"	d
MODKEY	config.h	118;"	d
MODKEY	reference/config-nogaps.h	99;"	d
MODKEY	reference/config-prevanity.h	115;"	d
MOUSEMASK	dwm.c	55;"	d	file:
Manager	dwm.c	/^enum { Manager, Xembed, XembedInfo, XLast }; \/* Xembed atoms *\/$/;"	e	enum:__anon10	file:
Monitor	dwm.c	/^struct Monitor {$/;"	s	file:
Monitor	dwm.c	/^typedef struct Monitor Monitor;$/;"	t	typeref:struct:Monitor	file:
NUMTAGS	dwm.c	58;"	d	file:
NetActiveWindow	dwm.c	/^       NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon9	file:
NetClientList	dwm.c	/^       NetWMWindowTypeDialog, NetClientList, NetLast }; \/* EWMH atoms *\/$/;"	e	enum:__anon9	file:
NetLast	dwm.c	/^       NetWMWindowTypeDialog, NetClientList, NetLast }; \/* EWMH atoms *\/$/;"	e	enum:__anon9	file:
NetSupported	dwm.c	/^enum { NetSupported, NetWMName, NetWMState, NetWMCheck,$/;"	e	enum:__anon9	file:
NetSystemTray	dwm.c	/^       NetSystemTray, NetSystemTrayOP, NetSystemTrayOrientation, NetSystemTrayOrientationHorz,$/;"	e	enum:__anon9	file:
NetSystemTrayOP	dwm.c	/^       NetSystemTray, NetSystemTrayOP, NetSystemTrayOrientation, NetSystemTrayOrientationHorz,$/;"	e	enum:__anon9	file:
NetSystemTrayOrientation	dwm.c	/^       NetSystemTray, NetSystemTrayOP, NetSystemTrayOrientation, NetSystemTrayOrientationHorz,$/;"	e	enum:__anon9	file:
NetSystemTrayOrientationHorz	dwm.c	/^       NetSystemTray, NetSystemTrayOP, NetSystemTrayOrientation, NetSystemTrayOrientationHorz,$/;"	e	enum:__anon9	file:
NetWMCheck	dwm.c	/^enum { NetSupported, NetWMName, NetWMState, NetWMCheck,$/;"	e	enum:__anon9	file:
NetWMFullscreen	dwm.c	/^       NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon9	file:
NetWMName	dwm.c	/^enum { NetSupported, NetWMName, NetWMState, NetWMCheck,$/;"	e	enum:__anon9	file:
NetWMState	dwm.c	/^enum { NetSupported, NetWMName, NetWMState, NetWMCheck,$/;"	e	enum:__anon9	file:
NetWMWindowType	dwm.c	/^       NetWMFullscreen, NetActiveWindow, NetWMWindowType,$/;"	e	enum:__anon9	file:
NetWMWindowTypeDialog	dwm.c	/^       NetWMWindowTypeDialog, NetClientList, NetLast }; \/* EWMH atoms *\/$/;"	e	enum:__anon9	file:
NumTags	dwm.c	/^struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };$/;"	s	file:
OBJ	Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
PREFIX	config.mk	/^PREFIX = \/usr\/local$/;"	m
Pertag	dwm.c	/^struct Pertag {$/;"	s	file:
Pertag	dwm.c	/^typedef struct Pertag Pertag;$/;"	t	typeref:struct:Pertag	file:
Rule	dwm.c	/^} Rule;$/;"	t	typeref:struct:__anon17	file:
SHCMD	config.def.h	126;"	d
SHCMD	config.defs.h	108;"	d
SHCMD	config.h	126;"	d
SHCMD	reference/config-nogaps.h	107;"	d
SHCMD	reference/config-prevanity.h	123;"	d
SPTAG	dwm.c	60;"	d	file:
SPTAGMASK	dwm.c	61;"	d	file:
SRC	Makefile	/^SRC = drw.c dwm.c util.c$/;"	m
SYSTEM_TRAY_REQUEST_DOCK	dwm.c	64;"	d	file:
SchemeNorm	dwm.c	/^enum { SchemeNorm, SchemeSel }; \/* color schemes *\/$/;"	e	enum:__anon8	file:
SchemeSel	dwm.c	/^enum { SchemeNorm, SchemeSel }; \/* color schemes *\/$/;"	e	enum:__anon8	file:
Sp	config.def.h	/^} Sp;$/;"	t	typeref:struct:__anon1
Sp	config.defs.h	/^} Sp;$/;"	t	typeref:struct:__anon2
Sp	config.h	/^} Sp;$/;"	t	typeref:struct:__anon3
Sp	reference/config-nogaps.h	/^} Sp;$/;"	t	typeref:struct:__anon19
Sp	reference/config-prevanity.h	/^} Sp;$/;"	t	typeref:struct:__anon18
Systray	dwm.c	/^struct Systray {$/;"	s	file:
Systray	dwm.c	/^typedef struct Systray   Systray;$/;"	t	typeref:struct:Systray	file:
TAGKEYS	config.def.h	119;"	d
TAGKEYS	config.defs.h	101;"	d
TAGKEYS	config.h	119;"	d
TAGKEYS	reference/config-nogaps.h	100;"	d
TAGKEYS	reference/config-prevanity.h	116;"	d
TAGMASK	dwm.c	59;"	d	file:
TEXTW	dwm.c	62;"	d	file:
UTF_INVALID	drw.c	11;"	d	file:
UTF_SIZ	drw.c	12;"	d	file:
VERSION	config.mk	/^VERSION = 6.2$/;"	m
VERSION_MAJOR	dwm.c	76;"	d	file:
VERSION_MINOR	dwm.c	77;"	d	file:
WIDTH	dwm.c	56;"	d	file:
WMDelete	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon11	file:
WMLast	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon11	file:
WMProtocols	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon11	file:
WMState	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon11	file:
WMTakeFocus	dwm.c	/^enum { WMProtocols, WMDelete, WMState, WMTakeFocus, WMLast }; \/* default atoms *\/$/;"	e	enum:__anon11	file:
X11INC	config.mk	/^X11INC = \/usr\/X11R6\/include$/;"	m
X11LIB	config.mk	/^X11LIB = \/usr\/X11R6\/lib$/;"	m
XEMBED_EMBEDDED_NOTIFY	dwm.c	67;"	d	file:
XEMBED_EMBEDDED_VERSION	dwm.c	78;"	d	file:
XEMBED_FOCUS_IN	dwm.c	69;"	d	file:
XEMBED_MAPPED	dwm.c	72;"	d	file:
XEMBED_MODALITY_ON	dwm.c	70;"	d	file:
XEMBED_WINDOW_ACTIVATE	dwm.c	68;"	d	file:
XEMBED_WINDOW_ACTIVATE	dwm.c	73;"	d	file:
XEMBED_WINDOW_DEACTIVATE	dwm.c	74;"	d	file:
XINERAMAFLAGS	config.mk	/^XINERAMAFLAGS = -DXINERAMA$/;"	m
XINERAMALIBS	config.mk	/^XINERAMALIBS  = -lXinerama$/;"	m
XLast	dwm.c	/^enum { Manager, Xembed, XembedInfo, XLast }; \/* Xembed atoms *\/$/;"	e	enum:__anon10	file:
Xembed	dwm.c	/^enum { Manager, Xembed, XembedInfo, XLast }; \/* Xembed atoms *\/$/;"	e	enum:__anon10	file:
XembedInfo	dwm.c	/^enum { Manager, Xembed, XembedInfo, XLast }; \/* Xembed atoms *\/$/;"	e	enum:__anon10	file:
applyrules	dwm.c	/^applyrules(Client *c)$/;"	f
applysizehints	dwm.c	/^applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact)$/;"	f
arg	dwm.c	/^	const Arg arg;$/;"	m	struct:__anon14	file:
arg	dwm.c	/^	const Arg arg;$/;"	m	struct:__anon15	file:
arrange	dwm.c	/^	void (*arrange)(Monitor *);$/;"	m	struct:__anon16	file:
arrange	dwm.c	/^arrange(Monitor *m)$/;"	f
arrangemon	dwm.c	/^arrangemon(Monitor *m)$/;"	f
attach	dwm.c	/^attach(Client *c)$/;"	f
attachstack	dwm.c	/^attachstack(Client *c)$/;"	f
autostartblocksh	dwm.c	/^static const char autostartblocksh[] = "autostart_blocking.sh";$/;"	v	file:
autostartsh	dwm.c	/^static const char autostartsh[] = "autostart.sh";$/;"	v	file:
barwin	dwm.c	/^	Window barwin;$/;"	m	struct:Monitor	file:
baseh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
basew	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
bh	dwm.c	/^static int bh, blw = 0;      \/* bar geometry *\/$/;"	v	file:
blw	dwm.c	/^static int bh, blw = 0;      \/* bar geometry *\/$/;"	v	file:
borderpx	config.def.h	/^static const unsigned int borderpx  = 3;        \/* border pixel of windows *\/$/;"	v
borderpx	config.defs.h	/^static const unsigned int borderpx  = 2;        \/* border pixel of windows *\/$/;"	v
borderpx	config.h	/^static const unsigned int borderpx  = 3;        \/* border pixel of windows *\/$/;"	v
borderpx	reference/config-nogaps.h	/^static const unsigned int borderpx  = 2;        \/* border pixel of windows *\/$/;"	v
borderpx	reference/config-prevanity.h	/^static const unsigned int borderpx  = 2;        \/* border pixel of windows *\/$/;"	v
broken	dwm.c	/^static const char broken[] = "broken";$/;"	v	file:
bstack	vanitygaps.c	/^bstack(Monitor *m)$/;"	f	file:
bstackhoriz	vanitygaps.c	/^bstackhoriz(Monitor *m)$/;"	f	file:
button	dwm.c	/^	unsigned int button;$/;"	m	struct:__anon14	file:
buttonpress	dwm.c	/^buttonpress(XEvent *e)$/;"	f
buttons	config.def.h	/^static Button buttons[] = {$/;"	v
buttons	config.defs.h	/^static Button buttons[] = {$/;"	v
buttons	config.h	/^static Button buttons[] = {$/;"	v
buttons	reference/config-nogaps.h	/^static Button buttons[] = {$/;"	v
buttons	reference/config-prevanity.h	/^static Button buttons[] = {$/;"	v
bw	dwm.c	/^	int bw, oldbw;$/;"	m	struct:Client	file:
by	dwm.c	/^	int by;               \/* bar geometry *\/$/;"	m	struct:Monitor	file:
centeredfloatingmaster	vanitygaps.c	/^centeredfloatingmaster(Monitor *m)$/;"	f
centeredmaster	vanitygaps.c	/^centeredmaster(Monitor *m)$/;"	f
checkotherwm	dwm.c	/^checkotherwm(void)$/;"	f
class	dwm.c	/^	const char *class;$/;"	m	struct:__anon17	file:
cleanup	dwm.c	/^cleanup(void)$/;"	f
cleanupmon	dwm.c	/^cleanupmon(Monitor *mon)$/;"	f
click	dwm.c	/^	unsigned int click;$/;"	m	struct:__anon14	file:
clientmessage	dwm.c	/^clientmessage(XEvent *e)$/;"	f
clients	dwm.c	/^	Client *clients;$/;"	m	struct:Monitor	file:
cmd	config.def.h	/^	const void *cmd;$/;"	m	struct:__anon1
cmd	config.defs.h	/^	const void *cmd;$/;"	m	struct:__anon2
cmd	config.h	/^	const void *cmd;$/;"	m	struct:__anon3
cmd	reference/config-nogaps.h	/^	const void *cmd;$/;"	m	struct:__anon19
cmd	reference/config-prevanity.h	/^	const void *cmd;$/;"	m	struct:__anon18
col_cyan	config.def.h	/^static const char col_cyan[]        = "#005577";$/;"	v
col_cyan	config.defs.h	/^static const char col_cyan[]        = "#005577";$/;"	v
col_cyan	config.h	/^static const char col_cyan[]        = "#005577";$/;"	v
col_cyan	reference/config-nogaps.h	/^static const char col_cyan[]        = "#005577";$/;"	v
col_cyan	reference/config-prevanity.h	/^static const char col_cyan[]        = "#005577";$/;"	v
col_gray1	config.def.h	/^static const char col_gray1[]       = "#222222";$/;"	v
col_gray1	config.defs.h	/^static const char col_gray1[]       = "#222222";$/;"	v
col_gray1	config.h	/^static const char col_gray1[]       = "#222222";$/;"	v
col_gray1	reference/config-nogaps.h	/^static const char col_gray1[]       = "#222222";$/;"	v
col_gray1	reference/config-prevanity.h	/^static const char col_gray1[]       = "#222222";$/;"	v
col_gray2	config.def.h	/^static const char col_gray2[]       = "#444444";$/;"	v
col_gray2	config.defs.h	/^static const char col_gray2[]       = "#444444";$/;"	v
col_gray2	config.h	/^static const char col_gray2[]       = "#444444";$/;"	v
col_gray2	reference/config-nogaps.h	/^static const char col_gray2[]       = "#444444";$/;"	v
col_gray2	reference/config-prevanity.h	/^static const char col_gray2[]       = "#444444";$/;"	v
col_gray3	config.def.h	/^static const char col_gray3[]       = "#bbbbbb";$/;"	v
col_gray3	config.defs.h	/^static const char col_gray3[]       = "#bbbbbb";$/;"	v
col_gray3	config.h	/^static const char col_gray3[]       = "#bbbbbb";$/;"	v
col_gray3	reference/config-nogaps.h	/^static const char col_gray3[]       = "#bbbbbb";$/;"	v
col_gray3	reference/config-prevanity.h	/^static const char col_gray3[]       = "#bbbbbb";$/;"	v
col_gray4	config.def.h	/^static const char col_gray4[]       = "#eeeeee";$/;"	v
col_gray4	config.defs.h	/^static const char col_gray4[]       = "#eeeeee";$/;"	v
col_gray4	config.h	/^static const char col_gray4[]       = "#eeeeee";$/;"	v
col_gray4	reference/config-nogaps.h	/^static const char col_gray4[]       = "#eeeeee";$/;"	v
col_gray4	reference/config-prevanity.h	/^static const char col_gray4[]       = "#eeeeee";$/;"	v
colors	config.def.h	/^static const char *colors[][3]      = {$/;"	v
colors	config.defs.h	/^static const char *colors[][3]      = {$/;"	v
colors	config.h	/^static const char *colors[][3]      = {$/;"	v
colors	reference/config-nogaps.h	/^static const char *colors[][3]      = {$/;"	v
colors	reference/config-prevanity.h	/^static const char *colors[][3]      = {$/;"	v
configure	dwm.c	/^configure(Client *c)$/;"	f
configurenotify	dwm.c	/^configurenotify(XEvent *e)$/;"	f
configurerequest	dwm.c	/^configurerequest(XEvent *e)$/;"	f
createmon	dwm.c	/^createmon(void)$/;"	f
cursor	drw.h	/^	Cursor cursor;$/;"	m	struct:__anon4
cursor	dwm.c	/^static Cur *cursor[CurLast];$/;"	v	file:
curtag	dwm.c	/^	unsigned int curtag, prevtag; \/* current and previous tag *\/$/;"	m	struct:Pertag	file:
deck	vanitygaps.c	/^deck(Monitor *m)$/;"	f
defaultgaps	vanitygaps.c	/^defaultgaps(const Arg *arg)$/;"	f
destroynotify	dwm.c	/^destroynotify(XEvent *e)$/;"	f
detach	dwm.c	/^detach(Client *c)$/;"	f
detachstack	dwm.c	/^detachstack(Client *c)$/;"	f
die	util.c	/^die(const char *fmt, ...) {$/;"	f
dirtomon	dwm.c	/^dirtomon(int dir)$/;"	f
dmenucmd	config.def.h	/^static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", norm_bg, "-nf", norm_fg, "-sb", sel_bg, "-sf", sel_fg, NULL };$/;"	v
dmenucmd	config.defs.h	/^static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", norm_bg, "-nf", norm_fg, "-sb", sel_bg, "-sf", sel_fg, NULL };$/;"	v
dmenucmd	config.h	/^static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", norm_bg, "-nf", norm_fg, "-sb", sel_bg, "-sf", sel_fg, NULL };$/;"	v
dmenucmd	reference/config-nogaps.h	/^static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", norm_bg, "-nf", norm_fg, "-sb", sel_bg, "-sf", sel_fg, NULL };$/;"	v
dmenucmd	reference/config-prevanity.h	/^static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", norm_bg, "-nf", norm_fg, "-sb", sel_bg, "-sf", sel_fg, NULL };$/;"	v
dmenufont	config.def.h	/^static const char dmenufont[]       = "JetbrainsMono:size=13:antialias=true:autohint=true";$/;"	v
dmenufont	config.defs.h	/^static const char dmenufont[]       = "JetbrainsMono:pixelsize=16:antialias=true:autohint=true";$/;"	v
dmenufont	config.h	/^static const char dmenufont[]       = "JetbrainsMono:size=13:antialias=true:autohint=true";$/;"	v
dmenufont	reference/config-nogaps.h	/^static const char dmenufont[]       = "JetbrainsMono:pixelsize=16:antialias=true:autohint=true";$/;"	v
dmenufont	reference/config-prevanity.h	/^static const char dmenufont[]       = "JetbrainsMono:pixelsize=16:antialias=true:autohint=true";$/;"	v
dmenumon	config.def.h	/^static char dmenumon[2] = "0"; \/* component of dmenucmd, manipulated in spawn() *\/$/;"	v
dmenumon	config.defs.h	/^static char dmenumon[2] = "0"; \/* component of dmenucmd, manipulated in spawn() *\/$/;"	v
dmenumon	config.h	/^static char dmenumon[2] = "0"; \/* component of dmenucmd, manipulated in spawn() *\/$/;"	v
dmenumon	reference/config-nogaps.h	/^static char dmenumon[2] = "0"; \/* component of dmenucmd, manipulated in spawn() *\/$/;"	v
dmenumon	reference/config-prevanity.h	/^static char dmenumon[2] = "0"; \/* component of dmenucmd, manipulated in spawn() *\/$/;"	v
dpy	drw.h	/^	Display *dpy;$/;"	m	struct:Fnt
dpy	drw.h	/^	Display *dpy;$/;"	m	struct:__anon6
dpy	dwm.c	/^static Display *dpy;$/;"	v	file:
drawable	drw.h	/^	Drawable drawable;$/;"	m	struct:__anon6
drawbar	dwm.c	/^drawbar(Monitor *m)$/;"	f
drawbars	dwm.c	/^drawbars(void)$/;"	f
drw	dwm.c	/^static Drw *drw;$/;"	v	file:
drw_clr_create	drw.c	/^drw_clr_create(Drw *drw, Clr *dest, const char *clrname)$/;"	f
drw_create	drw.c	/^drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned int h)$/;"	f
drw_cur_create	drw.c	/^drw_cur_create(Drw *drw, int shape)$/;"	f
drw_cur_free	drw.c	/^drw_cur_free(Drw *drw, Cur *cursor)$/;"	f
drw_font_getexts	drw.c	/^drw_font_getexts(Fnt *font, const char *text, unsigned int len, unsigned int *w, unsigned int *h)$/;"	f
drw_fontset_create	drw.c	/^drw_fontset_create(Drw* drw, const char *fonts[], size_t fontcount)$/;"	f
drw_fontset_free	drw.c	/^drw_fontset_free(Fnt *font)$/;"	f
drw_fontset_getwidth	drw.c	/^drw_fontset_getwidth(Drw *drw, const char *text)$/;"	f
drw_free	drw.c	/^drw_free(Drw *drw)$/;"	f
drw_map	drw.c	/^drw_map(Drw *drw, Window win, int x, int y, unsigned int w, unsigned int h)$/;"	f
drw_rect	drw.c	/^drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int invert)$/;"	f
drw_resize	drw.c	/^drw_resize(Drw *drw, unsigned int w, unsigned int h)$/;"	f
drw_scm_create	drw.c	/^drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount)$/;"	f
drw_setfontset	drw.c	/^drw_setfontset(Drw *drw, Fnt *set)$/;"	f
drw_setscheme	drw.c	/^drw_setscheme(Drw *drw, Clr *scm)$/;"	f
drw_text	drw.c	/^drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h, unsigned int lpad, const char *text, int invert)$/;"	f
dwindle	vanitygaps.c	/^dwindle(Monitor *m)$/;"	f
dwmdir	dwm.c	/^static const char dwmdir[] = "dwm";$/;"	v	file:
ecalloc	util.c	/^ecalloc(size_t nmemb, size_t size)$/;"	f
enablegaps	vanitygaps.c	/^static int enablegaps = 1;$/;"	v	file:
enternotify	dwm.c	/^enternotify(XEvent *e)$/;"	f
expose	dwm.c	/^expose(XEvent *e)$/;"	f
f	dwm.c	/^	float f;$/;"	m	union:__anon13	file:
fibonacci	vanitygaps.c	/^fibonacci(Monitor *m, int s)$/;"	f
focus	dwm.c	/^focus(Client *c)$/;"	f
focusin	dwm.c	/^focusin(XEvent *e)$/;"	f
focusmon	dwm.c	/^focusmon(const Arg *arg)$/;"	f
focusstack	dwm.c	/^focusstack(const Arg *arg)$/;"	f
fonts	config.def.h	/^static const char *fonts[]          = {$/;"	v
fonts	config.defs.h	/^static const char *fonts[]          = {$/;"	v
fonts	config.h	/^static const char *fonts[]          = {$/;"	v
fonts	drw.h	/^	Fnt *fonts;$/;"	m	struct:__anon6
fonts	reference/config-nogaps.h	/^static const char *fonts[]          = {$/;"	v
fonts	reference/config-prevanity.h	/^static const char *fonts[]          = {$/;"	v
fullscreen	dwm.c	/^fullscreen(const Arg *arg)$/;"	f
func	dwm.c	/^	void (*func)(const Arg *);$/;"	m	struct:__anon15	file:
func	dwm.c	/^	void (*func)(const Arg *arg);$/;"	m	struct:__anon14	file:
gaplessgrid	vanitygaps.c	/^gaplessgrid(Monitor *m)$/;"	f
gappih	config.def.h	/^static const unsigned int gappih    = 20;       \/* horiz inner gap between windows *\/$/;"	v
gappih	config.h	/^static const unsigned int gappih    = 20;       \/* horiz inner gap between windows *\/$/;"	v
gappih	dwm.c	/^  int gappih;           \/* horizontal gap between windows *\/$/;"	m	struct:Monitor	file:
gappih	reference/config-prevanity.h	/^static const unsigned int gappih    = 20;       \/* horiz inner gap between windows *\/$/;"	v
gappiv	config.def.h	/^static const unsigned int gappiv    = 10;       \/* vert inner gap between windows *\/$/;"	v
gappiv	config.h	/^static const unsigned int gappiv    = 10;       \/* vert inner gap between windows *\/$/;"	v
gappiv	dwm.c	/^	int gappiv;           \/* vertical gap between windows *\/$/;"	m	struct:Monitor	file:
gappiv	reference/config-prevanity.h	/^static const unsigned int gappiv    = 10;       \/* vert inner gap between windows *\/$/;"	v
gappoh	config.def.h	/^static const unsigned int gappoh    = 10;       \/* horiz outer gap between windows and screen edge *\/$/;"	v
gappoh	config.h	/^static const unsigned int gappoh    = 10;       \/* horiz outer gap between windows and screen edge *\/$/;"	v
gappoh	dwm.c	/^  int gappoh;           \/* horizontal outer gaps *\/$/;"	m	struct:Monitor	file:
gappoh	reference/config-prevanity.h	/^static const unsigned int gappoh    = 10;       \/* horiz outer gap between windows and screen edge *\/$/;"	v
gappov	config.def.h	/^static const unsigned int gappov    = 30;       \/* vert outer gap between windows and screen edge *\/$/;"	v
gappov	config.h	/^static const unsigned int gappov    = 30;       \/* vert outer gap between windows and screen edge *\/$/;"	v
gappov	dwm.c	/^  int gappov;           \/* vertical outer gaps *\/$/;"	m	struct:Monitor	file:
gappov	reference/config-prevanity.h	/^static const unsigned int gappov    = 30;       \/* vert outer gap between windows and screen edge *\/$/;"	v
gappx	config.def.h	/^static const unsigned int gappx     = 15;        \/* gaps between windows *\/$/;"	v
gappx	config.defs.h	/^static const unsigned int gappx     = 15;        \/* gaps between windows *\/$/;"	v
gappx	config.h	/^static const unsigned int gappx     = 15;        \/* gaps between windows *\/$/;"	v
gappx	reference/config-prevanity.h	/^static const unsigned int gappx     = 15;        \/* gaps between windows *\/$/;"	v
gc	drw.h	/^	GC gc;$/;"	m	struct:__anon6
getatomprop	dwm.c	/^getatomprop(Client *c, Atom prop)$/;"	f
getfacts	vanitygaps.c	/^getfacts(Monitor *m, int msize, int ssize, float *mf, float *sf, int *mr, int *sr)$/;"	f
getgaps	vanitygaps.c	/^getgaps(Monitor *m, int *oh, int *ov, int *ih, int *iv, unsigned int *nc)$/;"	f
getrootptr	dwm.c	/^getrootptr(int *x, int *y)$/;"	f
getstate	dwm.c	/^getstate(Window w)$/;"	f
getsystraywidth	dwm.c	/^getsystraywidth()$/;"	f
gettextprop	dwm.c	/^gettextprop(Window w, Atom atom, char *text, unsigned int size)$/;"	f
grabbuttons	dwm.c	/^grabbuttons(Client *c, int focused)$/;"	f
grabkeys	dwm.c	/^grabkeys(void)$/;"	f
grid	layouts.c	/^grid(Monitor *m) {$/;"	f
grid	vanitygaps.c	/^grid(Monitor *m)$/;"	f
h	drw.h	/^	unsigned int h;$/;"	m	struct:Fnt
h	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon6
h	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
handler	dwm.c	/^static void (*handler[LASTEvent]) (XEvent *) = {$/;"	v	file:
horizgrid	vanitygaps.c	/^horizgrid(Monitor *m) {$/;"	f
i	dwm.c	/^	int i;$/;"	m	union:__anon13	file:
icons	dwm.c	/^	Client *icons;$/;"	m	struct:Systray	file:
inch	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
incnmaster	dwm.c	/^incnmaster(const Arg *arg)$/;"	f
incrgaps	vanitygaps.c	/^incrgaps(const Arg *arg)$/;"	f
incrigaps	vanitygaps.c	/^incrigaps(const Arg *arg)$/;"	f
incrihgaps	vanitygaps.c	/^incrihgaps(const Arg *arg)$/;"	f
incrivgaps	vanitygaps.c	/^incrivgaps(const Arg *arg)$/;"	f
incrogaps	vanitygaps.c	/^incrogaps(const Arg *arg)$/;"	f
incrohgaps	vanitygaps.c	/^incrohgaps(const Arg *arg)$/;"	f
incrovgaps	vanitygaps.c	/^incrovgaps(const Arg *arg)$/;"	f
incw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
instance	dwm.c	/^	const char *instance;$/;"	m	struct:__anon17	file:
iscentered	dwm.c	/^	int iscentered;$/;"	m	struct:__anon17	file:
iscentered	dwm.c	/^	int isfixed, iscentered, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	file:
isfixed	dwm.c	/^	int isfixed, iscentered, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	file:
isfloating	dwm.c	/^	int isfixed, iscentered, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	file:
isfloating	dwm.c	/^	int isfloating;$/;"	m	struct:__anon17	file:
isfullscreen	dwm.c	/^	int isfixed, iscentered, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	file:
isuniquegeom	dwm.c	/^isuniquegeom(XineramaScreenInfo *unique, size_t n, XineramaScreenInfo *info)$/;"	f	file:
isurgent	dwm.c	/^	int isfixed, iscentered, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	file:
keypress	dwm.c	/^keypress(XEvent *e)$/;"	f
keys	config.def.h	/^static Key keys[] = {$/;"	v
keys	config.defs.h	/^static Key keys[] = {$/;"	v
keys	config.h	/^static Key keys[] = {$/;"	v
keys	reference/config-nogaps.h	/^static Key keys[] = {$/;"	v
keys	reference/config-prevanity.h	/^static Key keys[] = {$/;"	v
keysym	dwm.c	/^	KeySym keysym;$/;"	m	struct:__anon15	file:
killclient	dwm.c	/^killclient(const Arg *arg)$/;"	f
last_layout	dwm.c	/^Layout *last_layout;$/;"	v
layouts	config.def.h	/^static const Layout layouts[] = {$/;"	v
layouts	config.defs.h	/^static const Layout layouts[] = {$/;"	v
layouts	config.h	/^static const Layout layouts[] = {$/;"	v
layouts	reference/config-nogaps.h	/^static const Layout layouts[] = {$/;"	v
layouts	reference/config-prevanity.h	/^static const Layout layouts[] = {$/;"	v
limitexceeded	dwm.c	/^struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };$/;"	m	struct:NumTags	file:
localshare	dwm.c	/^static const char localshare[] = ".local\/share";$/;"	v	file:
lrpad	dwm.c	/^static int lrpad;            \/* sum of left and right padding for text *\/$/;"	v	file:
lt	dwm.c	/^	const Layout *lt[2];$/;"	m	struct:Monitor	file:
ltidxs	dwm.c	/^	const Layout *ltidxs[LENGTH(tags) + 1][2]; \/* matrix of tags and layouts indexes  *\/$/;"	m	struct:Pertag	file:
ltsymbol	dwm.c	/^	char ltsymbol[16];$/;"	m	struct:Monitor	file:
main	dwm.c	/^main(int argc, char *argv[])$/;"	f
main	transient.c	/^int main(void) {$/;"	f
manage	dwm.c	/^manage(Window w, XWindowAttributes *wa)$/;"	f
mappingnotify	dwm.c	/^mappingnotify(XEvent *e)$/;"	f
maprequest	dwm.c	/^maprequest(XEvent *e)$/;"	f
mask	dwm.c	/^	unsigned int mask;$/;"	m	struct:__anon14	file:
maxa	dwm.c	/^	float mina, maxa;$/;"	m	struct:Client	file:
maxh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
maxw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
mfact	config.def.h	/^static const float mfact     = 0.55; \/* factor of master area size [0.05..0.95] *\/$/;"	v
mfact	config.defs.h	/^static const float mfact     = 0.55; \/* factor of master area size [0.05..0.95] *\/$/;"	v
mfact	config.h	/^static const float mfact     = 0.55; \/* factor of master area size [0.05..0.95] *\/$/;"	v
mfact	dwm.c	/^	float mfact;$/;"	m	struct:Monitor	file:
mfact	reference/config-nogaps.h	/^static const float mfact     = 0.55; \/* factor of master area size [0.05..0.95] *\/$/;"	v
mfact	reference/config-prevanity.h	/^static const float mfact     = 0.55; \/* factor of master area size [0.05..0.95] *\/$/;"	v
mfacts	dwm.c	/^	float mfacts[LENGTH(tags) + 1]; \/* mfacts per tag *\/$/;"	m	struct:Pertag	file:
mh	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
mina	dwm.c	/^	float mina, maxa;$/;"	m	struct:Client	file:
minh	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
minw	dwm.c	/^	int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	file:
mod	dwm.c	/^	unsigned int mod;$/;"	m	struct:__anon15	file:
mon	dwm.c	/^	Monitor *mon;$/;"	m	struct:Client	file:
monitor	dwm.c	/^	int monitor;$/;"	m	struct:__anon17	file:
monocle	dwm.c	/^monocle(Monitor *m)$/;"	f
mons	dwm.c	/^static Monitor *mons, *selmon;$/;"	v	file:
motionnotify	dwm.c	/^motionnotify(XEvent *e)$/;"	f
movemouse	dwm.c	/^movemouse(const Arg *arg)$/;"	f
mw	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
mx	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
my	dwm.c	/^	int mx, my, mw, mh;   \/* screen size *\/$/;"	m	struct:Monitor	file:
name	config.def.h	/^	const char *name;$/;"	m	struct:__anon1
name	config.defs.h	/^	const char *name;$/;"	m	struct:__anon2
name	config.h	/^	const char *name;$/;"	m	struct:__anon3
name	dwm.c	/^	char name[256];$/;"	m	struct:Client	file:
name	reference/config-nogaps.h	/^	const char *name;$/;"	m	struct:__anon19
name	reference/config-prevanity.h	/^	const char *name;$/;"	m	struct:__anon18
netatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast], xatom[XLast];$/;"	v	file:
neverfocus	dwm.c	/^	int isfixed, iscentered, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	file:
next	drw.h	/^	struct Fnt *next;$/;"	m	struct:Fnt	typeref:struct:Fnt::Fnt
next	dwm.c	/^	Client *next;$/;"	m	struct:Client	file:
next	dwm.c	/^	Monitor *next;$/;"	m	struct:Monitor	file:
nexttiled	dwm.c	/^nexttiled(Client *c)$/;"	f
nmaster	config.def.h	/^static const int nmaster     = 1;    \/* number of clients in master area *\/$/;"	v
nmaster	config.defs.h	/^static const int nmaster     = 1;    \/* number of clients in master area *\/$/;"	v
nmaster	config.h	/^static const int nmaster     = 1;    \/* number of clients in master area *\/$/;"	v
nmaster	dwm.c	/^	int nmaster;$/;"	m	struct:Monitor	file:
nmaster	reference/config-nogaps.h	/^static const int nmaster     = 1;    \/* number of clients in master area *\/$/;"	v
nmaster	reference/config-prevanity.h	/^static const int nmaster     = 1;    \/* number of clients in master area *\/$/;"	v
nmasters	dwm.c	/^	int nmasters[LENGTH(tags) + 1]; \/* number of windows in master area *\/$/;"	m	struct:Pertag	file:
norm_bg	config.def.h	/^static const char norm_bg[] = "#05050A";$/;"	v
norm_bg	config.defs.h	/^static const char norm_bg[] = "#05050A";$/;"	v
norm_bg	config.h	/^static const char norm_bg[] = "#05050A";$/;"	v
norm_bg	reference/config-nogaps.h	/^static const char norm_bg[] = "#05050A";$/;"	v
norm_bg	reference/config-prevanity.h	/^static const char norm_bg[] = "#05050A";$/;"	v
norm_border	config.def.h	/^static const char norm_border[] = "#857989";$/;"	v
norm_border	config.defs.h	/^static const char norm_border[] = "#857989";$/;"	v
norm_border	config.h	/^static const char norm_border[] = "#857989";$/;"	v
norm_border	reference/config-nogaps.h	/^static const char norm_border[] = "#857989";$/;"	v
norm_border	reference/config-prevanity.h	/^static const char norm_border[] = "#857989";$/;"	v
norm_fg	config.def.h	/^static const char norm_fg[] = "#beadc4";$/;"	v
norm_fg	config.defs.h	/^static const char norm_fg[] = "#beadc4";$/;"	v
norm_fg	config.h	/^static const char norm_fg[] = "#beadc4";$/;"	v
norm_fg	reference/config-nogaps.h	/^static const char norm_fg[] = "#beadc4";$/;"	v
norm_fg	reference/config-prevanity.h	/^static const char norm_fg[] = "#beadc4";$/;"	v
nrowgrid	vanitygaps.c	/^nrowgrid(Monitor *m)$/;"	f
num	dwm.c	/^	int num;$/;"	m	struct:Monitor	file:
numlockmask	dwm.c	/^static unsigned int numlockmask = 0;$/;"	v	file:
oldbw	dwm.c	/^	int bw, oldbw;$/;"	m	struct:Client	file:
oldh	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
oldstate	dwm.c	/^	int isfixed, iscentered, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	file:
oldw	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
oldx	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
oldy	dwm.c	/^	int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	file:
pattern	drw.h	/^	FcPattern *pattern;$/;"	m	struct:Fnt
pertag	dwm.c	/^	Pertag *pertag;$/;"	m	struct:Monitor	file:
pop	dwm.c	/^pop(Client *c)$/;"	f
prevtag	dwm.c	/^	unsigned int curtag, prevtag; \/* current and previous tag *\/$/;"	m	struct:Pertag	file:
propertynotify	dwm.c	/^propertynotify(XEvent *e)$/;"	f
quit	dwm.c	/^quit(const Arg *arg)$/;"	f
recttomon	dwm.c	/^recttomon(int x, int y, int w, int h)$/;"	f
removesystrayicon	dwm.c	/^removesystrayicon(Client *i)$/;"	f
resize	dwm.c	/^resize(Client *c, int x, int y, int w, int h, int interact)$/;"	f
resizebarwin	dwm.c	/^resizebarwin(Monitor *m) {$/;"	f
resizeclient	dwm.c	/^resizeclient(Client *c, int x, int y, int w, int h)$/;"	f
resizehints	config.def.h	/^static const int resizehints = 1;    \/* 1 means respect size hints in tiled resizals *\/$/;"	v
resizehints	config.defs.h	/^static const int resizehints = 1;    \/* 1 means respect size hints in tiled resizals *\/$/;"	v
resizehints	config.h	/^static const int resizehints = 1;    \/* 1 means respect size hints in tiled resizals *\/$/;"	v
resizehints	reference/config-nogaps.h	/^static const int resizehints = 1;    \/* 1 means respect size hints in tiled resizals *\/$/;"	v
resizehints	reference/config-prevanity.h	/^static const int resizehints = 1;    \/* 1 means respect size hints in tiled resizals *\/$/;"	v
resizemouse	dwm.c	/^resizemouse(const Arg *arg)$/;"	f
resizerequest	dwm.c	/^resizerequest(XEvent *e)$/;"	f
restack	dwm.c	/^restack(Monitor *m)$/;"	f
root	drw.h	/^	Window root;$/;"	m	struct:__anon6
root	dwm.c	/^static Window root, wmcheckwin;$/;"	v	file:
rules	config.def.h	/^static const Rule rules[] = {$/;"	v
rules	config.defs.h	/^static const Rule rules[] = {$/;"	v
rules	config.h	/^static const Rule rules[] = {$/;"	v
rules	reference/config-nogaps.h	/^static const Rule rules[] = {$/;"	v
rules	reference/config-prevanity.h	/^static const Rule rules[] = {$/;"	v
run	dwm.c	/^run(void)$/;"	f
runautostart	dwm.c	/^runautostart(void)$/;"	f
running	dwm.c	/^static int running = 1;$/;"	v	file:
scan	dwm.c	/^scan(void)$/;"	f
scheme	drw.h	/^	Clr *scheme;$/;"	m	struct:__anon6
scheme	dwm.c	/^static Clr **scheme;$/;"	v	file:
scratchpads	config.def.h	/^static Sp scratchpads[] = {$/;"	v
scratchpads	config.defs.h	/^static Sp scratchpads[] = {$/;"	v
scratchpads	config.h	/^static Sp scratchpads[] = {$/;"	v
scratchpads	reference/config-nogaps.h	/^static Sp scratchpads[] = {$/;"	v
scratchpads	reference/config-prevanity.h	/^static Sp scratchpads[] = {$/;"	v
screen	drw.h	/^	int screen;$/;"	m	struct:__anon6
screen	dwm.c	/^static int screen;$/;"	v	file:
sel	dwm.c	/^	Client *sel;$/;"	m	struct:Monitor	file:
sel_bg	config.def.h	/^static const char sel_bg[] = "#364572";$/;"	v
sel_bg	config.defs.h	/^static const char sel_bg[] = "#364572";$/;"	v
sel_bg	config.h	/^static const char sel_bg[] = "#364572";$/;"	v
sel_bg	reference/config-nogaps.h	/^static const char sel_bg[] = "#364572";$/;"	v
sel_bg	reference/config-prevanity.h	/^static const char sel_bg[] = "#364572";$/;"	v
sel_border	config.def.h	/^static const char sel_border[] = "#013220";$/;"	v
sel_border	config.defs.h	/^static const char sel_border[] = "#beadc4";$/;"	v
sel_border	config.h	/^static const char sel_border[] = "#013220";$/;"	v
sel_border	reference/config-nogaps.h	/^static const char sel_border[] = "#beadc4";$/;"	v
sel_border	reference/config-prevanity.h	/^static const char sel_border[] = "#beadc4";$/;"	v
sel_fg	config.def.h	/^static const char sel_fg[] = "#beadc4";$/;"	v
sel_fg	config.defs.h	/^static const char sel_fg[] = "#beadc4";$/;"	v
sel_fg	config.h	/^static const char sel_fg[] = "#beadc4";$/;"	v
sel_fg	reference/config-nogaps.h	/^static const char sel_fg[] = "#beadc4";$/;"	v
sel_fg	reference/config-prevanity.h	/^static const char sel_fg[] = "#beadc4";$/;"	v
sellt	dwm.c	/^	unsigned int sellt;$/;"	m	struct:Monitor	file:
sellts	dwm.c	/^	unsigned int sellts[LENGTH(tags) + 1]; \/* selected layouts *\/$/;"	m	struct:Pertag	file:
selmon	dwm.c	/^static Monitor *mons, *selmon;$/;"	v	file:
seltags	dwm.c	/^	unsigned int seltags;$/;"	m	struct:Monitor	file:
sendevent	dwm.c	/^sendevent(Window w, Atom proto, int mask, long d0, long d1, long d2, long d3, long d4)$/;"	f
sendmon	dwm.c	/^sendmon(Client *c, Monitor *m)$/;"	f
setclientstate	dwm.c	/^setclientstate(Client *c, long state)$/;"	f
setfocus	dwm.c	/^setfocus(Client *c)$/;"	f
setfullscreen	dwm.c	/^setfullscreen(Client *c, int fullscreen)$/;"	f
setgaps	vanitygaps.c	/^setgaps(int oh, int ov, int ih, int iv)$/;"	f
setlayout	dwm.c	/^setlayout(const Arg *arg)$/;"	f
setmfact	dwm.c	/^setmfact(const Arg *arg)$/;"	f
setup	dwm.c	/^setup(void)$/;"	f
seturgent	dwm.c	/^seturgent(Client *c, int urg)$/;"	f
sfh	dwm.c	/^	int sfx, sfy, sfw, sfh; \/* stored float geometry, used on mode revert *\/$/;"	m	struct:Client	file:
sfw	dwm.c	/^	int sfx, sfy, sfw, sfh; \/* stored float geometry, used on mode revert *\/$/;"	m	struct:Client	file:
sfx	dwm.c	/^	int sfx, sfy, sfw, sfh; \/* stored float geometry, used on mode revert *\/$/;"	m	struct:Client	file:
sfy	dwm.c	/^	int sfx, sfy, sfw, sfh; \/* stored float geometry, used on mode revert *\/$/;"	m	struct:Client	file:
sh	dwm.c	/^static int sw, sh;           \/* X display screen geometry width, height *\/$/;"	v	file:
showbar	config.def.h	/^static const int showbar            = 1;        \/* 0 means no bar *\/$/;"	v
showbar	config.defs.h	/^static const int showbar            = 1;        \/* 0 means no bar *\/$/;"	v
showbar	config.h	/^static const int showbar            = 1;        \/* 0 means no bar *\/$/;"	v
showbar	dwm.c	/^	int showbar;$/;"	m	struct:Monitor	file:
showbar	reference/config-nogaps.h	/^static const int showbar            = 1;        \/* 0 means no bar *\/$/;"	v
showbar	reference/config-prevanity.h	/^static const int showbar            = 1;        \/* 0 means no bar *\/$/;"	v
showbars	dwm.c	/^	int showbars[LENGTH(tags) + 1]; \/* display bar for the current tag *\/$/;"	m	struct:Pertag	file:
showhide	dwm.c	/^showhide(Client *c)$/;"	f
showsystray	config.def.h	/^static const int showsystray        = 1;     \/* 0 means no systray *\/$/;"	v
showsystray	config.defs.h	/^static const int showsystray        = 1;     \/* 0 means no systray *\/$/;"	v
showsystray	config.h	/^static const int showsystray        = 1;     \/* 0 means no systray *\/$/;"	v
showsystray	reference/config-nogaps.h	/^static const int showsystray        = 1;     \/* 0 means no systray *\/$/;"	v
showsystray	reference/config-prevanity.h	/^static const int showsystray        = 1;     \/* 0 means no systray *\/$/;"	v
sigchld	dwm.c	/^sigchld(int unused)$/;"	f
smartgaps	config.def.h	/^static       int smartgaps          = 0;        \/* 1 means no outer gap when there is only one window *\/$/;"	v
smartgaps	config.h	/^static       int smartgaps          = 0;        \/* 1 means no outer gap when there is only one window *\/$/;"	v
smartgaps	reference/config-prevanity.h	/^static       int smartgaps          = 0;        \/* 1 means no outer gap when there is only one window *\/$/;"	v
snap	config.def.h	/^static const unsigned int snap      = 16;       \/* snap pixel *\/$/;"	v
snap	config.defs.h	/^static const unsigned int snap      = 16;       \/* snap pixel *\/$/;"	v
snap	config.h	/^static const unsigned int snap      = 16;       \/* snap pixel *\/$/;"	v
snap	reference/config-nogaps.h	/^static const unsigned int snap      = 16;       \/* snap pixel *\/$/;"	v
snap	reference/config-prevanity.h	/^static const unsigned int snap      = 16;       \/* snap pixel *\/$/;"	v
snext	dwm.c	/^	Client *snext;$/;"	m	struct:Client	file:
spawn	dwm.c	/^spawn(const Arg *arg)$/;"	f
spcmd1	config.def.h	/^const char *spcmd1[] = {"st", "-n", "spterm", "-g", "174x45", NULL };$/;"	v
spcmd1	config.defs.h	/^const char *spcmd1[] = {"st", "-n", "spterm", "-g", "120x34", NULL };$/;"	v
spcmd1	config.h	/^const char *spcmd1[] = {"st", "-n", "spterm", "-g", "174x45", NULL };$/;"	v
spcmd1	reference/config-nogaps.h	/^const char *spcmd1[] = {"st", "-n", "spterm", "-g", "168x61", NULL };$/;"	v
spcmd1	reference/config-prevanity.h	/^const char *spcmd1[] = {"st", "-n", "spterm", "-g", "120x34", NULL };$/;"	v
spcmd2	config.def.h	/^const char *spcmd2[] = {"st", "-n", "spfm", "-g", "144x41", "-e", "vifm", NULL };$/;"	v
spcmd2	config.defs.h	/^const char *spcmd2[] = {"st", "-n", "spfm", "-g", "144x41", "-e", "vifm", NULL };$/;"	v
spcmd2	config.h	/^const char *spcmd2[] = {"st", "-n", "spfm", "-g", "144x41", "-e", "vifm", NULL };$/;"	v
spcmd2	reference/config-nogaps.h	/^const char *spcmd2[] = {"st", "-n", "spfm", "-g", "144x41", "-e", "vifm", NULL };$/;"	v
spcmd2	reference/config-prevanity.h	/^const char *spcmd2[] = {"st", "-n", "spfm", "-g", "144x41", "-e", "vifm", NULL };$/;"	v
spcmd3	config.def.h	/^const char *spcmd3[] = {"st", "-n", "spcalc", "-f", "monospace:size=16", "-g", "50x20", "-e", "bc", "-lq", NULL };$/;"	v
spcmd3	config.defs.h	/^const char *spcmd3[] = {"st", "-n", "spcalc", "-f", "monospace:size=16", "-g", "50x20", "-e", "bc", "-lq", NULL };$/;"	v
spcmd3	config.h	/^const char *spcmd3[] = {"st", "-n", "spcalc", "-f", "monospace:size=16", "-g", "50x20", "-e", "bc", "-lq", NULL };$/;"	v
spcmd3	reference/config-nogaps.h	/^const char *spcmd3[] = {"st", "-n", "spcalc", "-f", "monospace:size=16", "-g", "50x20", "-e", "bc", "-lq", NULL };$/;"	v
spcmd3	reference/config-prevanity.h	/^const char *spcmd3[] = {"st", "-n", "spcalc", "-f", "monospace:size=16", "-g", "50x20", "-e", "bc", "-lq", NULL };$/;"	v
spiral	vanitygaps.c	/^spiral(Monitor *m)$/;"	f
stack	dwm.c	/^	Client *stack;$/;"	m	struct:Monitor	file:
stext	dwm.c	/^static char stext[256];$/;"	v	file:
sw	dwm.c	/^static int sw, sh;           \/* X display screen geometry width, height *\/$/;"	v	file:
symbol	dwm.c	/^	const char *symbol;$/;"	m	struct:__anon16	file:
systray	dwm.c	/^static Systray *systray =  NULL;$/;"	v	file:
systrayonleft	config.def.h	/^static const unsigned int systrayonleft = 0;   	\/* 0: systray in the right corner, >0: systray on left of status text *\/$/;"	v
systrayonleft	config.defs.h	/^static const unsigned int systrayonleft = 0;   	\/* 0: systray in the right corner, >0: systray on left of status text *\/$/;"	v
systrayonleft	config.h	/^static const unsigned int systrayonleft = 0;   	\/* 0: systray in the right corner, >0: systray on left of status text *\/$/;"	v
systrayonleft	reference/config-nogaps.h	/^static const unsigned int systrayonleft = 0;   	\/* 0: systray in the right corner, >0: systray on left of status text *\/$/;"	v
systrayonleft	reference/config-prevanity.h	/^static const unsigned int systrayonleft = 0;   	\/* 0: systray in the right corner, >0: systray on left of status text *\/$/;"	v
systraypinning	config.def.h	/^static const unsigned int systraypinning = 0;   \/* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X *\/$/;"	v
systraypinning	config.defs.h	/^static const unsigned int systraypinning = 0;   \/* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X *\/$/;"	v
systraypinning	config.h	/^static const unsigned int systraypinning = 0;   \/* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X *\/$/;"	v
systraypinning	reference/config-nogaps.h	/^static const unsigned int systraypinning = 0;   \/* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X *\/$/;"	v
systraypinning	reference/config-prevanity.h	/^static const unsigned int systraypinning = 0;   \/* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X *\/$/;"	v
systraypinningfailfirst	config.def.h	/^static const int systraypinningfailfirst = 1;   \/* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*\/$/;"	v
systraypinningfailfirst	config.defs.h	/^static const int systraypinningfailfirst = 1;   \/* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*\/$/;"	v
systraypinningfailfirst	config.h	/^static const int systraypinningfailfirst = 1;   \/* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*\/$/;"	v
systraypinningfailfirst	reference/config-nogaps.h	/^static const int systraypinningfailfirst = 1;   \/* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*\/$/;"	v
systraypinningfailfirst	reference/config-prevanity.h	/^static const int systraypinningfailfirst = 1;   \/* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*\/$/;"	v
systrayspacing	config.def.h	/^static const unsigned int systrayspacing = 2;   \/* systray spacing *\/$/;"	v
systrayspacing	config.defs.h	/^static const unsigned int systrayspacing = 2;   \/* systray spacing *\/$/;"	v
systrayspacing	config.h	/^static const unsigned int systrayspacing = 2;   \/* systray spacing *\/$/;"	v
systrayspacing	reference/config-nogaps.h	/^static const unsigned int systrayspacing = 2;   \/* systray spacing *\/$/;"	v
systrayspacing	reference/config-prevanity.h	/^static const unsigned int systrayspacing = 2;   \/* systray spacing *\/$/;"	v
systraytomon	dwm.c	/^systraytomon(Monitor *m) {$/;"	f
tag	dwm.c	/^tag(const Arg *arg)$/;"	f
tagmon	dwm.c	/^tagmon(const Arg *arg)$/;"	f
tags	config.def.h	/^static const char *tags[] = { "💻work", "🦡code", "🍄gsd", "🐍py", "chat", "🎵music", "👺tf", "🍕haplo", "🕸 web" };$/;"	v
tags	config.defs.h	/^static const char *tags[] = { "💻work", "🦡code", "🍄gsd", "🐍py", "chat", "🎵music", "👺tf", "🍕haplo", "🕸 web" };$/;"	v
tags	config.h	/^static const char *tags[] = { "💻work", "🦡code", "🍄gsd", "🐍py", "chat", "🎵music", "👺tf", "🍕haplo", "🕸 web" };$/;"	v
tags	dwm.c	/^	unsigned int tags;$/;"	m	struct:Client	file:
tags	dwm.c	/^	unsigned int tags;$/;"	m	struct:__anon17	file:
tags	reference/config-nogaps.h	/^static const char *tags[] = { "💻work", "🦡code", "🍄gsd", "🐍py", "chat", "🎵music", "👺tf", "🍕haplo", "🕸 web" };$/;"	v
tags	reference/config-prevanity.h	/^static const char *tags[] = { "💻work", "🦡code", "🍄gsd", "🐍py", "chat", "🎵music", "👺tf", "🍕haplo", "🕸 web" };$/;"	v
tagset	dwm.c	/^	unsigned int tagset[2];$/;"	m	struct:Monitor	file:
termcmd	config.def.h	/^static const char *termcmd[]  = { "st", NULL };$/;"	v
termcmd	config.defs.h	/^static const char *termcmd[]  = { "st", NULL };$/;"	v
termcmd	config.h	/^static const char *termcmd[]  = { "st", NULL };$/;"	v
termcmd	reference/config-nogaps.h	/^static const char *termcmd[]  = { "st", NULL };$/;"	v
termcmd	reference/config-prevanity.h	/^static const char *termcmd[]  = { "st", NULL };$/;"	v
tile	vanitygaps.c	/^tile(Monitor *m)$/;"	f	file:
title	dwm.c	/^	const char *title;$/;"	m	struct:__anon17	file:
togglebar	dwm.c	/^togglebar(const Arg *arg)$/;"	f
togglefloating	dwm.c	/^togglefloating(const Arg *arg)$/;"	f
togglegaps	vanitygaps.c	/^togglegaps(const Arg *arg)$/;"	f
togglescratch	dwm.c	/^togglescratch(const Arg *arg)$/;"	f
toggletag	dwm.c	/^toggletag(const Arg *arg)$/;"	f
toggleview	dwm.c	/^toggleview(const Arg *arg)$/;"	f
topbar	config.def.h	/^static const int topbar             = 1;        \/* 0 means bottom bar *\/$/;"	v
topbar	config.defs.h	/^static const int topbar             = 1;        \/* 0 means bottom bar *\/$/;"	v
topbar	config.h	/^static const int topbar             = 1;        \/* 0 means bottom bar *\/$/;"	v
topbar	dwm.c	/^	int topbar;$/;"	m	struct:Monitor	file:
topbar	reference/config-nogaps.h	/^static const int topbar             = 1;        \/* 0 means bottom bar *\/$/;"	v
topbar	reference/config-prevanity.h	/^static const int topbar             = 1;        \/* 0 means bottom bar *\/$/;"	v
ui	dwm.c	/^	unsigned int ui;$/;"	m	union:__anon13	file:
unfocus	dwm.c	/^unfocus(Client *c, int setfocus)$/;"	f
unmanage	dwm.c	/^unmanage(Client *c, int destroyed)$/;"	f
unmapnotify	dwm.c	/^unmapnotify(XEvent *e)$/;"	f
updatebarpos	dwm.c	/^updatebarpos(Monitor *m)$/;"	f
updatebars	dwm.c	/^updatebars(void)$/;"	f
updateclientlist	dwm.c	/^updateclientlist()$/;"	f
updategeom	dwm.c	/^updategeom(void)$/;"	f
updatenumlockmask	dwm.c	/^updatenumlockmask(void)$/;"	f
updatesizehints	dwm.c	/^updatesizehints(Client *c)$/;"	f
updatestatus	dwm.c	/^updatestatus(void)$/;"	f
updatesystray	dwm.c	/^updatesystray(void)$/;"	f
updatesystrayicongeom	dwm.c	/^updatesystrayicongeom(Client *i, int w, int h)$/;"	f
updatesystrayiconstate	dwm.c	/^updatesystrayiconstate(Client *i, XPropertyEvent *ev)$/;"	f
updatetitle	dwm.c	/^updatetitle(Client *c)$/;"	f
updatewindowtype	dwm.c	/^updatewindowtype(Client *c)$/;"	f
updatewmhints	dwm.c	/^updatewmhints(Client *c)$/;"	f
urg_bg	config.def.h	/^static const char urg_bg[] = "#4F355B";$/;"	v
urg_bg	config.defs.h	/^static const char urg_bg[] = "#4F355B";$/;"	v
urg_bg	config.h	/^static const char urg_bg[] = "#4F355B";$/;"	v
urg_bg	reference/config-nogaps.h	/^static const char urg_bg[] = "#4F355B";$/;"	v
urg_bg	reference/config-prevanity.h	/^static const char urg_bg[] = "#4F355B";$/;"	v
urg_fg	config.def.h	/^static const char urg_fg[] = "#beadc4";$/;"	v
urg_fg	config.defs.h	/^static const char urg_fg[] = "#beadc4";$/;"	v
urg_fg	config.h	/^static const char urg_fg[] = "#beadc4";$/;"	v
urg_fg	reference/config-nogaps.h	/^static const char urg_fg[] = "#beadc4";$/;"	v
urg_fg	reference/config-prevanity.h	/^static const char urg_fg[] = "#beadc4";$/;"	v
utf8decode	drw.c	/^utf8decode(const char *c, long *u, size_t clen)$/;"	f	file:
utf8decodebyte	drw.c	/^utf8decodebyte(const char c, size_t *i)$/;"	f	file:
utf8validate	drw.c	/^utf8validate(long *u, size_t i)$/;"	f	file:
utfbyte	drw.c	/^static const unsigned char utfbyte[UTF_SIZ + 1] = {0x80,    0, 0xC0, 0xE0, 0xF0};$/;"	v	file:
utfmask	drw.c	/^static const unsigned char utfmask[UTF_SIZ + 1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};$/;"	v	file:
utfmax	drw.c	/^static const long utfmax[UTF_SIZ + 1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};$/;"	v	file:
utfmin	drw.c	/^static const long utfmin[UTF_SIZ + 1] = {       0,    0,  0x80,  0x800,  0x10000};$/;"	v	file:
v	dwm.c	/^	const void *v;$/;"	m	union:__anon13	file:
view	dwm.c	/^view(const Arg *arg)$/;"	f
w	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon6
w	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
wh	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
win	dwm.c	/^	Window win;$/;"	m	struct:Client	file:
win	dwm.c	/^	Window win;$/;"	m	struct:Systray	file:
wintoclient	dwm.c	/^wintoclient(Window w)$/;"	f
wintomon	dwm.c	/^wintomon(Window w)$/;"	f
wintosystrayicon	dwm.c	/^wintosystrayicon(Window w) {$/;"	f
wmatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast], xatom[XLast];$/;"	v	file:
wmcheckwin	dwm.c	/^static Window root, wmcheckwin;$/;"	v	file:
ww	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
wx	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
wy	dwm.c	/^	int wx, wy, ww, wh;   \/* window area  *\/$/;"	m	struct:Monitor	file:
x	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
xatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast], xatom[XLast];$/;"	v	file:
xerror	dwm.c	/^xerror(Display *dpy, XErrorEvent *ee)$/;"	f
xerrordummy	dwm.c	/^xerrordummy(Display *dpy, XErrorEvent *ee)$/;"	f
xerrorstart	dwm.c	/^xerrorstart(Display *dpy, XErrorEvent *ee)$/;"	f
xerrorxlib	dwm.c	/^static int (*xerrorxlib)(Display *, XErrorEvent *);$/;"	v	file:
xfont	drw.h	/^	XftFont *xfont;$/;"	m	struct:Fnt
xfont_create	drw.c	/^xfont_create(Drw *drw, const char *fontname, FcPattern *fontpattern)$/;"	f	file:
xfont_free	drw.c	/^xfont_free(Fnt *font)$/;"	f	file:
y	dwm.c	/^	int x, y, w, h;$/;"	m	struct:Client	file:
zoom	dwm.c	/^zoom(const Arg *arg)$/;"	f
